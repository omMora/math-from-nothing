Require Import init.

Require Export set_base.
Require Export set_function.

Notation "‚ãÉ S" := (Œª x, ‚àÉ A, S A ‚àß A x) (at level 45).
Notation "‚ãÇ S" := (Œª x, ‚àÄ A, S A ‚Üí A x) (at level 45).

Definition image_under_collection {U V} (f : U ‚Üí V) (S : (U ‚Üí Prop) ‚Üí Prop)
    := Œª Y, ‚àÉ X, S X ‚àß Y = image_under f X.
Definition inverse_image_collection {U V} (f : U ‚Üí V) (T : (V ‚Üí Prop) ‚Üí Prop)
    := Œª X, ‚àÉ Y, T Y ‚àß X = inverse_image f Y.

Definition collection2 {U} (A B : U ‚Üí Prop) := Œª S, S = A ‚à® S = B.

Theorem inverse_union {U V} : ‚àÄ (f : U ‚Üí V) S,
    inverse_image f (‚ãÉ S) = ‚ãÉ (inverse_image_collection f S).
Proof.
    intros f S.
    apply antisym.
    -   intros x [A [SA Afx]].
        exists (inverse_image f A).
        split.
        +   exists A.
            split; trivial.
        +   exact Afx.
    -   intros x [A [[Y [SY A_eq]] Ax]].
        rewrite A_eq in Ax.
        exists Y.
        split; assumption.
Qed.

Theorem collection2_union {U} : ‚àÄ A B : U ‚Üí Prop, A ‚à™ B = ‚ãÉ (collection2 A B).
Proof.
    intros A B.
    apply antisym.
    -   intros x [Ax|Bx].
        +   exists A.
            split.
            *   left.
                reflexivity.
            *   exact Ax.
        +   exists B.
            split.
            *   right.
                reflexivity.
            *   exact Bx.
    -   intros x [S [[SA|SB] Sx]]; subst S.
        +   left; exact Sx.
        +   right; exact Sx.
Qed.

Theorem collection2_inter {U} : ‚àÄ A B : U ‚Üí Prop, A ‚à© B = ‚ãÇ (collection2 A B).
Proof.
    intros A B.
    apply antisym.
    -   intros x [Ax Bx].
        intros S [SA|SB]; subst.
        +   exact Ax.
        +   exact Bx.
    -   intros x x_in.
        split; apply x_in.
        +   left.
            reflexivity.
        +   right.
            reflexivity.
Qed.

Theorem union_empty {U} : ‚ãÉ (empty (U := U ‚Üí Prop)) = ‚àÖ.
Proof.
    apply empty_eq.
    intros x [A [C Ax]].
    exact C.
Qed.

Theorem union_singleton {U} : ‚àÄ S : U ‚Üí Prop, S = ‚ãÉ ‚ù¥S‚ùµ.
Proof.
    intros S.
    apply predicate_ext.
    intros x; split.
    -   intros Sx.
        exists S.
        split.
        +   reflexivity.
        +   exact Sx.
    -   intros [A [AS Ax]].
        rewrite AS.
        exact Ax.
Qed.

Theorem inter_singleton {U} : ‚àÄ S : U ‚Üí Prop, S = ‚ãÇ ‚ù¥S‚ùµ.
Proof.
    intros S.
    apply antisym.
    -   intros x Sx A AS.
        rewrite <- AS.
        exact Sx.
    -   intros x Ax.
        apply Ax.
        reflexivity.
Qed.

Theorem big_union_compl {U} : ‚àÄ SS : (U ‚Üí Prop) ‚Üí Prop,
    ùêÇ (‚ãÉ SS) = ‚ãÇ (Œª S, SS (ùêÇ S)).
Proof.
    intros SS.
    apply predicate_ext.
    intros x; split; intros x_in.
    -   intros A SSA.
        classic_contradiction nAx.
        apply x_in.
        exists (ùêÇ A).
        split; assumption.
    -   intros [A [SSA Ax]].
        specialize (x_in (ùêÇ A)).
        rewrite compl_compl in x_in.
        specialize (x_in SSA).
        contradiction.
Qed.

Theorem big_inter_compl {U} : ‚àÄ SS : (U ‚Üí Prop) ‚Üí Prop,
    ùêÇ (‚ãÇ SS) = ‚ãÉ (Œª S, SS (ùêÇ S)).
Proof.
    intros SS.
    apply predicate_ext.
    intros x; split; intros x_in.
    -   classic_contradiction contr.
        apply x_in.
        intros A SSA.
        classic_contradiction nAx.
        apply contr; clear contr.
        exists (ùêÇ A).
        rewrite compl_compl.
        split; assumption.
    -   intros contr.
        destruct x_in as [A [SSA Ax]].
        specialize (contr _ SSA).
        contradiction.
Qed.

Theorem empty_union {U} : ‚ãÉ ‚àÖ = (empty (U := U)).
Proof.
    apply antisym.
    -   intros x [A [A_in x_in]].
        contradiction A_in.
    -   intros x x_in.
        contradiction x_in.
Qed.
