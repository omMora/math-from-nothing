Require Import init.

Require Export set_base.
Require Export set_function.

Notation "‚ãÉ S" := (Œª x, ‚àÉ A, S A ‚àß A x) (at level 45).
Notation "‚ãÇ S" := (Œª x, ‚àÄ A, S A ‚Üí A x) (at level 45).

Definition image_under_collection {U V} (f : U ‚Üí V) (S : (U ‚Üí Prop) ‚Üí Prop)
    := Œª Y, ‚àÉ X, S X ‚àß Y = image_under f X.
Definition inverse_image_collection {U V} (f : U ‚Üí V) (T : (V ‚Üí Prop) ‚Üí Prop)
    := Œª X, ‚àÉ Y, T Y ‚àß X = inverse_image f Y.

Theorem union_sub {U} : ‚àÄ SS : (U ‚Üí Prop) ‚Üí Prop, ‚àÄ S, SS S ‚Üí S ‚äÜ ‚ãÉ SS.
Proof.
    intros SS S SS_S x Sx.
    exists S.
    split; assumption.
Qed.

Theorem inter_sub {U} : ‚àÄ SS : (U ‚Üí Prop) ‚Üí Prop, ‚àÄ S, SS S ‚Üí ‚ãÇ SS ‚äÜ S.
Proof.
    intros SS S SS_S.
    intros x Sx.
    apply Sx.
    exact SS_S.
Qed.

Theorem union_empty {U} : ‚ãÉ (empty (U := U ‚Üí Prop)) = ‚àÖ.
Proof.
    apply empty_eq.
    intros x [A [C Ax]].
    exact C.
Qed.

Theorem inter_empty {U} : ‚ãÇ (empty (U := U ‚Üí Prop)) = all.
Proof.
    apply all_eq.
    intros x A A_in.
    contradiction A_in.
Qed.

Theorem union_rec {U} : ‚àÄ (A : U ‚Üí Prop) (S : (U ‚Üí Prop) ‚Üí Prop),
    ‚ãÉ (‚ù¥A‚ùµ ‚à™ S) = A ‚à™ (‚ãÉ S).
Proof.
    intros A S.
    apply antisym.
    -   intros x [B [B_in Bx]].
        destruct B_in as [AB|SB].
        +   left.
            rewrite AB.
            exact Bx.
        +   right.
            exists B.
            split; assumption.
    -   intros x [Ax|[B [SB Bx]]].
        +   exists A.
            split; [>|exact Ax].
            left.
            reflexivity.
        +   exists B.
            split; [>|exact Bx].
            right.
            exact SB.
Qed.

Theorem inter_rec {U} : ‚àÄ (A : U ‚Üí Prop) (S : (U ‚Üí Prop) ‚Üí Prop),
    ‚ãÇ (‚ù¥A‚ùµ ‚à™ S) = A ‚à© (‚ãÇ S).
Proof.
    intros A S.
    apply antisym.
    -   intros x x_in.
        split.
        +   apply x_in.
            left.
            reflexivity.
        +   intros B SB.
            apply x_in.
            right.
            exact SB.
    -   intros x [Ax x_in] B [AB|SB].
        +   rewrite <- AB.
            exact Ax.
        +   apply x_in.
            exact SB.
Qed.

Theorem union_singleton {U} : ‚àÄ S : U ‚Üí Prop, ‚ãÉ ‚ù¥S‚ùµ = S.
Proof.
    intros S.
    rewrite <- (union_rid ‚ù¥S‚ùµ).
    rewrite union_rec.
    rewrite union_empty.
    apply union_rid.
Qed.

Theorem inter_singleton {U} : ‚àÄ S : U ‚Üí Prop, ‚ãÇ ‚ù¥S‚ùµ = S.
Proof.
    intros S.
    rewrite <- (union_rid ‚ù¥S‚ùµ).
    rewrite inter_rec.
    rewrite inter_empty.
    apply inter_rid.
Qed.

Theorem union_pair {U} : ‚àÄ A B : U ‚Üí Prop, ‚ãÉ ‚ù¥A, B‚ùµ = A ‚à™ B.
Proof.
    intros A B.
    rewrite pair_union.
    rewrite union_rec.
    rewrite union_singleton.
    reflexivity.
Qed.

Theorem inter_pair {U} : ‚àÄ A B : U ‚Üí Prop, ‚ãÇ ‚ù¥A, B‚ùµ = A ‚à© B.
Proof.
    intros A B.
    rewrite pair_union.
    rewrite inter_rec.
    rewrite inter_singleton.
    reflexivity.
Qed.

Theorem big_union_compl {U} : ‚àÄ SS : (U ‚Üí Prop) ‚Üí Prop,
    ùêÇ (‚ãÉ SS) = ‚ãÇ (Œª S, SS (ùêÇ S)).
Proof.
    intros SS.
    apply predicate_ext.
    intros x; split; intros x_in.
    -   intros A SSA.
        classic_contradiction nAx.
        apply x_in.
        exists (ùêÇ A).
        split; assumption.
    -   intros [A [SSA Ax]].
        specialize (x_in (ùêÇ A)).
        rewrite compl_compl in x_in.
        exact (x_in SSA Ax).
Qed.

Theorem big_inter_compl {U} : ‚àÄ SS : (U ‚Üí Prop) ‚Üí Prop,
    ùêÇ (‚ãÇ SS) = ‚ãÉ (Œª S, SS (ùêÇ S)).
Proof.
    intros SS.
    apply predicate_ext.
    intros x; split; intros x_in.
    -   unfold ùêÇ in x_in.
        rewrite not_all in x_in.
        destruct x_in as [A x_in].
        rewrite not_impl in x_in.
        destruct x_in as [SSa nAx].
        exists (ùêÇ A).
        rewrite compl_compl.
        split; assumption.
    -   intros contr.
        destruct x_in as [A [SSA Ax]].
        specialize (contr _ SSA).
        contradiction.
Qed.

Theorem inverse_union {U V} : ‚àÄ (f : U ‚Üí V) S,
    inverse_image f (‚ãÉ S) = ‚ãÉ (inverse_image_collection f S).
Proof.
    intros f S.
    apply antisym.
    -   intros x [A [SA Afx]].
        exists (inverse_image f A).
        split.
        +   exists A.
            split; trivial.
        +   exact Afx.
    -   intros x [A [[Y [SY A_eq]] Ax]].
        rewrite A_eq in Ax.
        exists Y.
        split; assumption.
Qed.
